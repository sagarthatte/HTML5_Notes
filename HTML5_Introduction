HTM5: New Structural Elements
- Aimed towards simplicity

Improvements include:
a. new doctype definition
b. the "type" attribute for elements such as <link> and <script> are now optional
c. the syntax constraints have now been relaxed.
d. new structural elements have been added.

-- MINIMAL HTML DOCUMENT----------

<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="utf-8">
	<title>Page Title</title>
	<link rel="stylesheet" href="style.css">
	<script src="script.js"></script>
</head>
<body>
<!-- Random content -->
</body>
</html>
------------------------------------------

- No quotes needed for most attribute values, if an attribute value is made of a single word, and is alphanumeric.
- No closing tags needed for most html elements.

--------------------------------------------------------------------

New Structural Elements
- Currently in HTML, "parts" are implemented by relying heavily on <div> and <span> with different id and attributes, as also CSS and Javascript.

Disadvantages/ Limitations of this approach:
- id and class names might differ from one developer to other, and so on.
- Even with same id and class names, css rules may be different.
- JavaScript libraries become heavier over the years.
- Web pages become code heavy as well.
- These elements can not be handled by Web browser natively.

To overcome these limitations, as also based on surveys for commonly used id's and class names all over the WWW, new elements are added to HTML5 set.

1. <header> instead of <div class="header"> -->Typically header of a web site, that appears on top of each page, or a header of a long <article> or long <section>.
2. <aside> instead of <div class="aside"> -->Section whose content is not directly related to main content surrounding it, but provides additional information.
3. <footer> --> Contains the footer of a site, a long <article> or a long <section>/
4. <nav> --> Section containing the main navigation links (within document or to other pages).
5. <article> --> Independent content, that can be individually extracted from document, and alienated, without compromising the understanding of subject. (example: Blog Post).
6. <section> --> Generic section used to group different articles for various purposes. OR to definte the different sections of single article. Generally used with a <header>
7. <time> --> Used to mark up time and dates.
8. <figure>, <figcaption> --> To encapsulate a figure as a single term, and contains a caption for figure, respectively.
9. <main> --> Represents main content of body/document/application. This area consists of content directly related to, or expands on central topic of document.There can only be one <main> element in a document.
-----------------------------------------------------------------------------------------------------------------

<Details> and <Summary> elements
- For displaying a foldable zone in an HTML Document.
- <Summary> is nested inside <Details> element, and is text for a closed piece of widget.
- Rest of content outside the <summary> tags, inside <Details> is text, when you expand widget.

- CSS Pseudo Classes for styling icon for expand/collapse the widget (STILL UNOFFICIAL, ONLY WORKS IN CHROME).
/******************************************
    summary::-webkit-details-marker {
        color:#FF0000;
        background:#FFFFFF;
    }
*****************************************/
	
/*****************************************************
    details[open] summary::-webkit-details-marker {
        color:#0000FF;
        background:#00FFFF;
    }
******************************************************/

**Adding Retro-Compatibility:
Polyfill--> Piece of JavaScript code to include in HTML page,that emulates HTML5 feautres not yet 
supported/implemented by browsers. Usually polyfills emulates feature, only on detecting no native support.

Find polyfills at:
1. http://caniuse.com
2. http://html5please.com
3. http://modernizr.com

EXAMPLE: (with <details> and <summary>)
<details> and <summary> not supported by all browsers (FF).How to use them in website --> polyfills.

--> Complete polyfill for all browsers for <details> and <summary>:
a. http://codepen.io/w3devcampus/pen/GJrQzP
b. http://codepen.io/w3devcampus/pen/NqdyJK

--------------------------------------------------------------------------------------------------
*** The <time> and <mark> elements:

<time>
	Useful for marking a time or a duration in the document
	Provides a human readable part (between <time> and </time>), and a machine readable part contained within a 		 	datetime attribute.
	Dates are expressed as YYYY-MM-DD.
	
	Machine readable part adds semantics to be used by search engines for indexing,
	Useful scenarios:
		Alerts on birthdays, automatically adding dates or events that contain <time> into a calendar.
		
The DATETIME attribute:
	Can be used for indicating a date/time or a duration.

Date/Time Values:
	Supports different specifications 'year', 'month in a year', 'week in a year', 'a time'.
	
	Examples:
			datetime="1905"					year 1905
			datetime="1905-11"				November 1905
			datetime="11-13"				November 13th of any year
			datetime="1905-W21"				Week 21 of year 1905
			datetime="1905-11-13 09:00"		Nov 13, 1905, 9am
			datetime="1905-11-13T09:00"		Same as above example.
			datetime="09:00"Z"				9:00 in the morning GMT.
			datetime="09:00-05"				9:00 in the morning, GMT minus 5 hours
			

DURATION VALUES:
	Use the prefix "P" for 'period' as in <time datetime="P4D"> (period = four days)
	Start attribute string value with a P to indicate period and ends with another letter:
		D for days
		H for hours,
		M for minutes,
		S for seconds.
	Can separate elements, so datetime="P 4 D" is same thing.
	Using a "T" after "P" allows to indicate more accurate time duration:
		<time datetime="PT4H 6M 12.55S"> is a duration of 4 hours, 6 minutes and 12.55 seconds.
	Alternatively, use a duration time component.

<TIME> Element with NO Attributes:
	Used without attributes, value between the <time> tags, shold follow syntax given by specification, so that 			machines understand it. However, recommended to use datetime attribute, as it gives more freedom in the way you     can display date/time/duration in human-readable form.
	
-------------------------------------------------------------------------------------------------------------------

THE <mark> ELEMENT:
	Used for indicating text as marked or highlighted for reference purposes, due to relevance in another context.
	
	Some use cases:
		a. Display search results with search strings highlighted.
		b. Highligh important parts of a text, like "quotes".
		c. Replace <strong> and <em> with <mark> as suitable.

------------------------------------------------------------------------------------------------------------------

The new HTML5 'DOWNLOAD' attribute for <A HREF>:

Old way to download files using HTML and HTTP:
	Classic way to make hyperlinks is <a href="...">some text </a>
	What happens on clicking on this link, depends on type of MIME received by the browser.
		a. If linked to a file, browser knows how to render (an html page, a fig, jpg or png image, etc).
			High chance that MIME received by browser is somewhat like this:
			1. Content-type: text/html, text/plain, image/gif, image/jpg, etc.
			
			HTML Code such as:
			<a href="image.jpg">Please right click on this to dowload the picture </a>
			will ask remote HTTP server to send back the image file. Browser will receive in teh HTTP response header 			from the server (and by default, browser will display image in new tab):
			Content-Disposition: attachment; filename="MyImage.png";
			
NEW Way to Download a File using an Arbitrary Name: The DOWNLOAD Attribute:
	HTML5 uses new attribute 'download' to download resources rather than navigating to them. 
	Example shows how to trigger download of image by browser (instead of rendering it), with a name different from
	name of the resource.
		<a href="/asset-v1:W3Cx@asset+block/normal.gif" download="MichaelBuffa.gif">
		download picture of Michael Buffa</a>
		
		NOTE: 'Download' attribute not supported by IE or Safari, as of Feb 2015.
		
		WARNING: Since 2015, for security purposes, the image must be located on same domain as the HTML page that
				contains the link.
-------------------------------------------------------------------------------------------------------------

HTML TRANSLATE ATTRIBUTE
	Attribute is used to limit the impact of translation tools such as Google Translate by prohibiting the translation
	of certain content. There are cases, where some parts of a document, must not be translated.
	
	Use Cases:
		a. HTML pages containing source code.
		b. Video Game websites that propose cheat codes, etc.
		c. Street names, author names, etc.
		
	- Google Translate and MS online Translate services have ability to prevent translation of content by adding 
	  markup to content, but this is achieved using multiple ways.
	  
	  PRINCIPLE: Provide hints to translating tools.
	  		- The translate attribute is an enumerated attribute used to specify whether an element's attribute values 			  and the values of its text node children are to be translated when page is localized, or leave them
	  		  unchanged.
	  		- Attribute keywords are empty string, yes, and no. Empty string and 'yes' map to 'yes' state. 'no' maps
	  		  to 'no state'. In addition, a third state i.e. 'inherit' state, which is the missing value default.
	  		  
	  	EXAMPLE: specifying parts of html element that should not be translated:
	  		<span translate="no" class="author">Michael Ham</span>
	  		
  		EXAMPLE: Inheritance between elements
  			- When defining an element as not being translatable, children inherit behavior and are themselves
  			  not translatable. The reverse is also true.
  			<p translate="no">This......<span>........</span> ..... </p>
		
--------------------------------------------------------------------------------------------------------------

MICRODATA:
	- HTML5 way of providing machine-readable content embedded in a Web document.
	- Adding microdata to pags, helps search engines better understand page content, the main topic, etc.
	- Main interest for microdata is 'Search Engine Optimization' (SEO).
	
	- Information is not visible to humans, it is purely 'semantic information'.
	- Popular kinds of microdata are:
		a. Events
		b. Person's profile details
		c. Geographic location
		d. Recipe Details
		e. Organization Details
		f. Product Specifications, etc.
		
	EXAMPLE: (Microdata to describe a person).
	<section itemscope itemtype="http://schema.org/Person">
		<h1>Contact Information</h1>
		<dl>
			<dt>Name</dt>
			<dd itemprop="name">Michael Buffa</dd>
			<dt>Position</dt>
			<dd><span itemprop="jobTitle">Professor/Researcher</span> for <span itemprop="affiliation">Univ</span>
			</dd>
		</dl>
	</section>
	
* Data that can be processed, organized, structured, or presented in a given context.
	Use Cases:
		- Browser or browser extension, may interpret last example as an address, and may propose to send it to a map
		  application.
		- A web crawler may interpret this as address, and display in its responses, using dedicated layout.
		- Some JScript code in the page can access this data.
		- Other types of microdata, for events, for ex, browser may prompt to calendar application, etc.
		
-----------------------
Testing Tools:
	- https://developers.google.com/structured-data/testing-tool/
	- http://foolip.org/microdatajs/live/

--------------------------------
Implementing Microdata in your page (using attributes 'itemscope', 'itemtype', 'itemprop'):
	Basic:
		Adding microdata to HTML page is simple, and requires only three attributes mentioned above.
	
	1. Define a container element, by adding an 'itemscope' attribute:
		- Need to add itemscope attribute to an HTML element.
		- This defines 'global object' for which we define properties.
		- Elements can be of different types (to be explained later).
		
	2. Specify vocabulary for microdata with the itemtype attribute of container element.
		- HTML5 proposes semantic elements to represent sections, articles, headers, etc., but does not propose
		  specific elements/attributes to describe address/person/product (bit like XML tags).
		- Need special vocabulary for this.
		- Define your own vocab, or use existing ones, defined at http://www.schema.org
		- Works with properties defined in name/value pairs. Names are defined in corresponding vocab.
		
	3. Add properties using itemprop attribute in HTML elements inside container.
	
	----------------------------------------------------------------------------------------
	
	Tools for generating, visualizing, debugging microdata.
		
		1. http://www.barryko.com/seo/html5-microdata-schema-generator/
		2. http://www.microdatagenerator.com/
		3. http://www.schema-creator.org
		
		Microdata Visualization:
		1. http://tools.seomoves.org/microdata
		2. http://miageprojet2.unice.fr/Intranet_de_Michel_Buffa/Outils_de_validation_HTML5%2F%2Fextensions_de_navigateurs
		
--------------------------------------------------

	
	
		

